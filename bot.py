import logging
import openai
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

# ===== –ù–ê–°–¢–†–û–ô–ö–ò =====
OPENAI_API_KEY = "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"
TELEGRAM_TOKEN = "8285599492:AAE6YguLaWTZfTu6O46D4q3rSKnjTyIDKxw"

openai.api_key = OPENAI_API_KEY

# ===== –õ–û–ì–ò =====
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ===== –ö–û–ú–ê–ù–î–´ =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user.first_name if update.effective_user else "–¥—Ä—É–≥"
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user}! üëã\n"
        f"–Ø —Ç–≤–æ–π —Ñ—Ä–∏–ª–∞–Ω—Å-–ø–æ–º–æ—â–Ω–∏–∫ –Ω–∞ –±–∞–∑–µ GPT ü§ñ\n\n"
        f"–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å –æ—Ç–≤–µ—Ç–æ–º, —Ç–µ–∫—Å—Ç–æ–º, –∏–¥–µ–µ–π –∏–ª–∏ —á–µ–º —É–≥–æ–¥–Ω–æ!"
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üõ† –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–≤–µ—á—É —Å –ø–æ–º–æ—â—å—é GPT ‚ú®"
    )

# ===== –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê GPT =====
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text.strip()
    user = update.effective_user.first_name if update.effective_user else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    logger.info(f"{user} –Ω–∞–ø–∏—Å–∞–ª: {user_text}")

    if not user_text:
        await update.message.reply_text("‚ö†Ô∏è –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
        return

    try:
        response = openai.Completion.create(
            engine="text-davinci-003",
            prompt=f"–û—Ç–≤–µ—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: {user_text}",
            max_tokens=300,
            temperature=0.8,
        )
        answer = response.choices[0].text.strip()
        await update.message.reply_text(answer or "ü§î –ù–µ –º–æ–≥—É –ø—Ä–∏–¥—É–º–∞—Ç—å –æ—Ç–≤–µ—Ç.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ GPT: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

# ===== –ó–ê–ü–£–°–ö =====
def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")
    app.run_polling()

if __name__ == "__main__":
    main()
